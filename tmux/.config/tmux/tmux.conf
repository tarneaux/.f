#----------#
# Bindings #
#----------#

# remap prefix from 'C-b' to 'C-a'
unbind C-b
set-option -g prefix C-a
bind-key C-a send-prefix

# Better splitting keys

unbind g
bind-key g split-window -h

unbind c
bind-key c split-window -v

# Bind the original % and " keys to the actions of g and c
unbind %
bind-key % new-window
unbind '"'
bind-key '"' command-prompt

# Reload config
bind-key r source-file ~/.config/tmux/tmux.conf

# Easier pane switching with Ctrl - home row keys
unbind n
bind n select-pane -L
unbind e
bind e select-pane -U
unbind i
bind i select-pane -D
unbind o
bind o select-pane -R

#---------#
# Options #
#---------#

# Delete the session when the last window is closed
# set -g detach-on-destroy on

# Longer history
set -g history-limit 100000

# Refresh status bar every 5 seconds
set -g status-interval 1

set -g default-terminal "screen-256color"
set -g terminal-overrides ",xterm*:Tc"

set -g pane-border-style 'fg=colour7'
set -g pane-active-border-style 'fg=colour3'

# Mouse mode
set -g mouse on

# See https://unix.stackexchange.com/questions/608142/whats-the-effect-of-escape-time-in-tmux
# for this option, I'm not sure about how to explain it but nvim recommends it
set -g escape-time 10

# Another option recommended by nvim:
# > WARNING focus-events is not enabled. 'autoread' may not work.
set -g focus-events on

#------------#
# Status bar #
#------------#

# Basic options
set -g status-justify absolute-centre
# set -g status-bg colour237
# set -g status-fg colour15
set -g status-bg colour0
set -g status-fg colour5
set -g status-left-length 50
set -g status-right-length 50
set -g status-position top # because vim is on the bottom

# Main formatting strings
set -g status-left "#{@sis} #{T:@status-left-outer} #{@sms} #{T:@status-left-middle} #{@sos} #{T:@status-left-inner} #{@ses}"
set -g status-right "#{@sos} #{T:@status-right-inner} #{@sms} #{T:@status-right-middle} #{@sis} #{T:@status-right-outer} #{@ses}"

# Status bar styles (with colour)
set -g @sos "#[bg=colour237,fg=colour15, nobold]" # status outer style
set -g @sms "#[bg=#504945, fg=#ebdbb2, nobold]" # status middle style
set -g @sis "#[bg=#a89984, fg=#282828, bold]" # status inner style
set -g @ses "" # status end style (last segment)

# Status bar styles (without colour)
# set -g @sos "#[fg=colour238, nobold]|#[fg=colour1]" # status outer style
# set -g @sms "#[fg=colour238, nobold]|#[fg=colour2]" # status middle style
# set -g @sis "#[fg=colour238, nobold]|#[fg=colour3]" # status inner style
# set -g @ses "#[fg=colour238, nobold]|#[fg=colour4]" # status end style (last segment)


# Content
set -g @status-left-outer '#{session_name}'
set -g @status-left-middle '#(echo #{pane_current_path} | sed "s|$HOME|~|g" | rev | cut -d "/" -f 1 | rev)'
set -g @status-left-inner '#{T:@segment-docker-running-containers}#{T:@segment-docker-offline-containers}#{T:@segment-docker-no-containers}'
set -g @status-right-inner '#{T:@segment-git-all}'
set -g @status-right-middle '#{T:@segment-time}'
set -g @status-right-outer '#{T:@segment-who-and-where}'

set -g @segment-time "%H:%M"
set -g @segment-who-and-where "#{user}@#{host_short}"
# Git commands in a single segment
set -g @segment-git-all "#(cd #{pane_current_path}; [[ `git rev-parse --show-toplevel` ]] && echo -n ' ' && #{@command-git-branch} && #{@command-git-staged} && #{@command-git-unstaged} && #{@command-git-toplevel} || echo x)"
set -g @command-git-branch "git rev-parse --abbrev-ref HEAD | tr -d '\n'"
set -g @command-git-staged "git diff --staged --numstat | awk '{s+=$1} END {print s}' | sed 's/^/ +/g' | grep -E '.{3,}' | tr -d '\n'"
set -g @command-git-unstaged "git diff --numstat | awk '{s+=$1} END {print s}' | sed 's/^/ ~/g' | grep -E '.{3,}' | tr -d '\n'"
set -g @command-git-toplevel "git rev-parse --show-toplevel | grep -E '.{1,}' |  rev | cut -d '/' -f 1 | rev | sed 's/^/ /g' | tr -d '\n'"

set -g @segment-docker-running-containers "#(docker ps --format '{{.Names}}' | sed 's/^/ /g' | sed 's/$/ /g' | grep -E '.{1,}' | tr -d '\n')"
set -g @segment-docker-offline-containers "#(docker ps -a --format '{{.Names}}' | grep -vf <(docker ps --format '{{.Names}}') | sed 's/^/ /g' | sed 's/$/ /g' | grep -E '.{1,}' | tr -d '\n')"
set -g @segment-docker-no-containers '#(docker ps -aq | wc -l | xargs -I {} sh -c "if [ \"{}\" -eq \"0\" ]; then echo 'x'; fi")'

set -g set-titles-string "#{pane_title} "

set -g window-status-format "#[fg=colour0,bg=colour7] #I:#W "
set -g window-status-current-format "#[fg=colour0,bg=colour3] #I:#W "
