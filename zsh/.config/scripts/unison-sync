#! /bin/bash

# This script is used to sync a local directory with a remote one using unison.
# It notifies you when a conflict occurs and allows you to resolve it manually by running the script again with the -i option.

# Change the following variables to suit your needs:
REMOTE_HOST="cocinero-tarneo" # the remote host to sync with.
REMOTE_DIR="sync"             # the remote directory
LOCAL_DIR="$HOME/.sync"       # the local directory, preferably an absolute path.

# parse arguments
while getopts 'ih' opt; do
    case "$opt" in
      i)
          interactive=1
          ;;
      h)
          echo "Usage: $0 [-i] [-h]"
          echo "  -i: interactive mode: allows you to resolve conflicts manually, only syncs once"
          echo "  -h: this help"
          exit 0
          ;;
      *)
          echo "Usage: $0 [-i] [-h]"
          exit 1
          ;;
  esac
done

# Verify notify-send is installed.
which notify-send &> /dev/null || {
    echo "notify-send is not installed. This script needs it to work."
    exit 1
}

# Wait until we are connected to the internet.
while ! ping -c 1 -W 1 8.8.8.8
do
	sleep 1
done

# Check that we can connect to the remote host.
ssh -q "${REMOTE_HOST}" exit || {
    echo "Could not connect to ${REMOTE_HOST}."
    exit 1
}

if [[ -n "$interactive" ]]; then
    # interactive mode: sync once with user input and exit
    echo -e "\e[33mReminder: when faced with a conflict, use '<' and '>' to select which way to force the sync,"\
        "or just press enter to skip the file and solve the conflict manually later.\e[0m"
    cmd="unison -auto -times ${LOCAL_DIR} ssh://${REMOTE_HOST}/${REMOTE_DIR}"
    echo -e "\e[33mI'll be using the following command: \e[1m${cmd}\e[0m"
    exec $cmd
else
	while true; do
		LOGFILE="${XDG_STATE_HOME:-$HOME/.local/state}/unison-sync/log"

		mkdir -p "$(dirname "$LOGFILE")"
		echo "Starting unison-sync" > "$LOGFILE"

		run_unison() {
			# watch+3600 -> sync on every change and do a full scan every hour (just in case).
			# -color false -> disable color output, since it could mess up matching the output.
			# 2>&1 -> redirect stderr to stdout so we can read it. Without this, we wouldn't be able to detect conflicts.
			unison -repeat watch+3600 -color false -auto -times "${LOCAL_DIR}" ssh://${REMOTE_HOST}/${REMOTE_DIR} 2>&1
		}

		# Start the unison command in the background.
		coproc run_unison

		# Get the PID of the unison process.
		echo -e "\e[33mBackground Unison process started. PID: \e[1m${COPROC_PID}\e[0m"
		echo -e "\e[33mNow outputting Unison log.\e[0m"

		# Whenever a new line is printed by the unison process, print it to the terminal.
		# The following things could indicate a conflict or other problem:
		#  - "  skipped: path/to/file"
		#  - "  failed: path/to/file"
		while read -r line; do
			echo "$line"
			echo "$line" >> "$LOGFILE"
			if [[ "$line" == "skipped: "* ]]; then
				notify-send -u critical "Unison skipped a file" "Log:\n$line\n\nYou should probably run 'unison-sync -i' to resolve the conflict manually.'"
			elif [[ "$line" == "failed: "* ]]; then
				notify-send -u critical "Unison sync" "File sync failed. Log:\n$line\n\nYou should probably run 'unison-sync -i' to resolve the conflict manually.'"
			fi
		done <&"${COPROC[0]}"

		echo -e "\e[33mUnison process exited. Sleeping for 5 seconds before restarting.\e[0m"
		sleep 5
	done
fi
